# Generated by Django 5.2.4 on 2025-09-10 21:13

from django.conf import settings
from django.db import migrations, models
from django.db.models import Count, Max


def clean_ratings(apps, schema_editor):
    Rating = apps.get_model('common', 'Rating')

    # 1) normalize '' -> None so partial unique index (isnull=False) ignores them
    Rating.objects.filter(session_key='').update(session_key=None)

    # 2) if both owners set, prefer user and drop the session_key (enforce XOR)
    Rating.objects.filter(user__isnull=False, session_key__isnull=False).update(session_key=None)

    # 3) remove orphaned rows (no owner at all)
    Rating.objects.filter(user__isnull=True, session_key__isnull=True).delete()

    # 4) deduplicate per (ct, obj, user) keeping most recent
    dup_user = (Rating.objects
                .filter(user__isnull=False)
                .values('content_type_id','object_id','user_id')
                .annotate(cnt=Count('id'), keep=Max('id'))
                .filter(cnt__gt=1))
    for r in dup_user:
        (Rating.objects
         .filter(content_type_id=r['content_type_id'],
                 object_id=r['object_id'],
                 user_id=r['user_id'])
         .exclude(id=r['keep'])
         ).delete()

    # 5) deduplicate per (ct, obj, session_key) for non-null keys, keeping most recent
    dup_guest = (Rating.objects
                 .filter(session_key__isnull=False)
                 .values('content_type_id','object_id','session_key')
                 .annotate(cnt=Count('id'), keep=Max('id'))
                 .filter(cnt__gt=1))
    for r in dup_guest:
        (Rating.objects
         .filter(content_type_id=r['content_type_id'],
                 object_id=r['object_id'],
                 session_key=r['session_key'])
         .exclude(id=r['keep'])
         ).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("common", "0004_remove_likeditem_uniq_user_jewel_like_and_more"),
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RemoveConstraint(
            model_name="rating",
            name="uniq_rating_session",
        ),
        migrations.AlterField(
            model_name="rating",
            name="session_key",
            field=models.CharField(
                blank=True, db_index=True, default=None, max_length=40, null=True
            ),
        ),
        migrations.RunPython(
            clean_ratings,
            migrations.RunPython.noop
        ),
        migrations.AddConstraint(
            model_name="rating",
            constraint=models.UniqueConstraint(
                condition=models.Q(("session_key__isnull", False)),
                fields=("content_type", "object_id", "session_key"),
                name="uniq_rating_session",
            ),
        ),
        migrations.AddConstraint(
            model_name="rating",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("session_key__isnull", True), ("user__isnull", False)),
                    models.Q(("session_key__isnull", False), ("user__isnull", True)),
                    _connector="OR",
                ),
                name="rating_exactly_one_owner",
            ),
        ),
    ]
